
name: Build Tutorials

on:
  push:
    tags: ["*"]
  pull_request:
    branches: [ master ]
  workflow_dispatch:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }} 

jobs:

  find-tag:
    runs-on: ubuntu-latest
    outputs:
      latest-tag: ${{ steps.find-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - id: find-tag
        run: echo "tag=$(git describe --tags `git rev-list --tags=tutorials-* --max-count=1`)" >> "$GITHUB_OUTPUT"


  link-check:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: prefix-dev/setup-pixi@v0.8.7
        with:
          cache: true
          cache-write: ${{ contains(fromJSON('["push", "workflow_dispatch"]'), github.event_name) && github.ref_name == 'master' }}
        
      - run: pixi run sphinx-build -M linkcheck . _build -W --keep-going -a -q 
      

  link-check-last-tagged:

    runs-on: ubuntu-latest
    needs: find-tag
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.find-tag.outputs.latest-tag }}
      
      - uses: prefix-dev/setup-pixi@v0.8.7
        with:
          cache: true
          cache-write: ${{ contains(fromJSON('["push", "workflow_dispatch"]'), github.event_name) && github.ref_name == 'master' }}
  
      - run: pixi run sphinx-build -M linkcheck . _build -W --keep-going -a -q 
        continue-on-error: true

  test-latest:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        test_group: [1, 2, 3, 4, 5, 6, 7, 8]


    steps:
      - uses: actions/checkout@v4
        name: Checkout Tutorials
        with:
          fetch-depth: 0
          path: tutorials
      - uses: actions/checkout@v4
        name: Checkout AMMR
        with:
          repository: anybody/ammr
          ref: master
          path: ammr
      - uses: actions/checkout@v4
        name: Checkout AMMR4
        with:
          repository: anybody/ammr4-beta
          ref: ammr4-beta
          path: ammr4
        

      - name: Link AMMR
        shell: cmd
        run: | 
            echo #include "%GITHUB_WORKSPACE%/ammr/libdef.any" > libdef.any
            echo #include "%GITHUB_WORKSPACE%/ammr4/libdef.any" > libdef-ammr4.any
          
      - uses: prefix-dev/setup-pixi@v0.8.7
        with:
          cache: true
          cache-write: ${{ contains(fromJSON('["push", "workflow_dispatch"]'), github.event_name) && github.ref_name == 'master' }}
          environments: test
          manifest-path: tutorials/pixi.toml
          activate-environment: true
        
      - name: Test Snippets
        if: ${{ !github.event.pull_request.head.repo.fork && github.repository == 'anybody/tutorials' }}
        run: |
          cd tutorials
          pytest -n auto --dist worksteal `
          --splits 8 --group ${{ matrix.test_group }} --splitting-algorithm=least_duration
          
        env:
          RLM_LICENSE: ${{ secrets.LICENSE_TEST_SERVER }}
          RLM_LICENSE_PASSWORD: ${{ secrets.LICENSE_TEST_SERVER_PASSWORD }}
    
  build-latest:

    runs-on: ubuntu-latest
    needs: [link-check]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - uses: prefix-dev/setup-pixi@v0.8.7
        with:
          cache: true
          cache-write: ${{ contains(fromJSON('["push", "workflow_dispatch"]'), github.event_name) && github.ref_name == 'master' }}
  
      - name: Build Documentation
        run: pixi run sphinx-build -M html . _build -W --keep-going -a -t draft
    
      - uses: actions/upload-artifact@v4
        with:
          name: beta-version
          path: _build/html


  build-tagged:

    runs-on: ubuntu-latest
    needs: [find-tag, link-check]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.find-tag.outputs.latest-tag }}
          fetch-depth: 0

      - uses: prefix-dev/setup-pixi@v0.8.7
        with:
          cache: true
          cache-write: ${{ contains(fromJSON('["push", "workflow_dispatch"]'), github.event_name) && github.ref_name == 'master' }}
    
      - name: Build Documentation
        run: pixi run sphinx-build -M html . _build -W --keep-going -a
            

      - uses: actions/upload-artifact@v4
        with:
          name: tagged-version
          path: _build/html

  prepare-pages:
    needs: [build-latest, build-tagged, test-latest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tagged-version
          path: public
      - uses: actions/download-artifact@v4
        with:
          name: beta-version
          path: public/beta
      - uses: actions/upload-pages-artifact@v3
        with: 
          path: public
          


  deploy:
    needs: prepare-pages
    # only run if master branch or if tag containing "tutorials-*" is pushed
    if: github.ref == 'refs/heads/master' || contains(github.ref, 'tags/tutorials-')
    runs-on: ubuntu-latest
    permissions:
      pages: write    
      id-token: write 

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
                  
     